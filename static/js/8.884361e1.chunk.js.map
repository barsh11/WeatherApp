{"version":3,"sources":["constants/api.js","services/axios.js","utilities/getIconSrc.js","components/UI/WeatherIcon/WeatherIcon.js","components/ForecastItem/ForecastItem.jsx","components/Forecast/Forecast.jsx","containers/ForecastContainer/ForcastContainer.js"],"names":["BASE_URL","BASE_URL_LOCATIONS","BASE_URL_CONDITIONS","BASE_URL_DAILY","BASE_URL_FORECAST","createInstance","url","queryParams","axios","create","baseURL","params","apikey","process","axiosConditions","axiosDefs","axiosDaily","details","axiosForecast","axiosLocations","getIconSrc","iconNum","num","toString","SImg","styled","img","props","size","setSize","WeatherIcon","className","src","SForcestItemWrapper","div","SWeatherIcon","ForecastItem","Typography","typographyType","capitalize","text","data","date","time","iconSrc","value","SForecastWrapper","SForecast","Forecast","shadow","map","el","renderForecastItem","toLocalDate","ISO8601String","ISODate","moment","utc","format","utcDate","toDate","local","toLocalTime","ForecastContainer","useState","results","setResults","locationKey","onError","initState","useCallback","getState","query","isActive","get","then","res","forecastResults","_","cloneDeep","DateTime","fDeg","Temperature","Value","toFixed","catch","error","Object","getOwnPropertyDescriptor","useEffect"],"mappings":"8QAIaA,EAAW,uCAGXC,EAAkB,UAAMD,EAAN,oCAGlBE,EAAmB,UAAMF,EAAN,yBAGnBG,EAAc,UAAMH,EAAN,4BAGdI,EAAiB,UAAMJ,EAAN,+BCbxBK,EAAgB,SAACC,EAAKC,GAQxB,OAPgBC,IAAMC,OAAO,CACzBC,QAASJ,EACTK,OAAO,aACHC,ODNWC,oCCORN,MAMFO,EAAiBT,EAAeU,EAA+B,MAE/DC,EAAYX,EAAeU,EAA0B,CAACE,SAAS,IAE/DC,EAAeb,EAAeU,EAA6B,MAE3DI,EAAgBd,EAAeU,EAA8B,O,gCCpB1E,kCAAO,IAAMK,EAAY,SAACC,GACtB,IAAIC,EAAG,OAAED,QAAF,IAAEA,OAAF,EAAEA,EAASE,WAKlB,OAJGF,EAAU,KACTC,EAAI,IAAD,OAAMA,IAEFD,EAAO,gEAA4DC,EAA5D,UAA0E,O,2KCFhG,IAaME,EAAMC,IAAOC,IAAT,KACG,SAAAC,GAAK,OAdH,SAACC,GACZ,OAAOA,GACH,IAAK,QACD,MAAO,SACX,QACI,MAAM,gIASIC,CAAO,OAACF,QAAD,IAACA,OAAD,EAACA,EAAOC,SAetBE,IAXI,SAACH,GAEhB,OACI,cAACH,EAAD,CACAO,UAAYJ,EAAMI,UAClBC,IAAML,EAAMK,IACZJ,KAAOD,EAAMC,S,8lBCtBrB,IAAMK,EAAqBR,IAAOS,IAAT,KAenBC,EAAcV,YAAOK,IAAPL,CAAF,KA6BHW,EAxBK,SAAAT,GAEhB,OACI,eAACM,EAAD,CACAF,UAAYJ,EAAMI,UADlB,UAEI,cAACM,EAAA,EAAD,CACAC,eAAgB,OAChBC,YAAa,EACbC,KAAOb,EAAMc,KAAKC,OAClB,cAACL,EAAA,EAAD,CACAC,eAAgB,OAChBC,YAAa,EACbC,KAAOb,EAAMc,KAAKE,OAClB,cAACR,EAAD,CACAH,IAAML,EAAMc,KAAKG,QACjBhB,KAAM,UACN,cAACS,EAAA,EAAD,CACAC,eAAgB,OAChBC,YAAa,EACbC,KAAOb,EAAMc,KAAKI,MAAQ,a,oeCvCtC,IAAMC,EAAmBrB,IAAOS,IAAV,KAchBa,EAAYtB,IAAOS,IAAV,KAyCAc,EA3BE,SAACrB,GAAW,IAAD,EAU1B,OACE,eAACmB,EAAD,CAAkBf,UAAWJ,EAAMI,UAAnC,UACE,cAACM,EAAA,EAAD,CAAYC,eAAe,WAAWW,QAAQ,EAAMT,KAAK,aACzD,cAACO,EAAD,oBACGpB,EAAMc,YADT,aACG,EAAYS,KAAI,SAACC,GAAD,OAbI,SAAC,GAAoC,IAAlCT,EAAiC,EAAjCA,KAAMC,EAA2B,EAA3BA,KAAME,EAAqB,EAArBA,MAAOD,EAAc,EAAdA,QAC/C,OACE,cAAC,EAAD,CAEEH,KAAM,CAAEC,KAAMA,EAAMC,KAAMA,EAAME,MAAOA,EAAOD,QAASA,IADlDD,GAWHS,CAAmB,CACjBV,KAAMS,EAAGT,KACTC,KAAMQ,EAAGR,KACTE,MAAOM,EAAGN,MACVD,QAASO,EAAGP,mB,QCzClBS,EAAc,SAACC,GACnB,IAAMC,EAAUC,IAAOC,MAAMC,OAAOJ,GAC9BK,EAAUH,IAAOC,IAAIF,GAASK,SACpC,OAAOJ,IAAOG,GAASE,QAAQH,OAAO,UAGlCI,EAAc,SAACR,GACnB,IAAMC,EAAUC,IAAOC,MAAMC,OAAOJ,GAC9BK,EAAUH,IAAOC,IAAIF,GAASK,SACpC,OAAOJ,IAAOG,GAASE,QAAQH,OAAO,UAyDzBK,UAtDW,SAACpC,GAAW,IAAD,EACLqC,mBAAS,IADJ,mBAC5BC,EAD4B,KACnBC,EADmB,KAG3BC,EAAyBxC,EAAzBwC,YAAaC,EAAYzC,EAAZyC,QAEfC,EAAYC,uBAAY,WAC5BJ,EAAW,MACV,IAEGK,EAAWD,uBACf,SAACE,EAAOC,GACNjE,IACGkE,IADH,UACUF,IACPG,MAAK,SAACC,GACL,IAAIC,EAAkBC,IAAEC,UAAUH,EAAInC,MACtCoC,EAAkBA,EAAgB3B,KAAI,SAACC,GACrC,MAAO,CACLT,KAAMW,EAAYF,EAAG6B,UACrBrC,KAAMmB,EAAYX,EAAG6B,UACrBnC,OAnCAoC,EAmCY9B,EAAG+B,YAAYC,OAlChB,EAAI,GAAlBF,EAAO,KAAeG,QAAQ,IAmC3BxC,QAASxB,YAAW+B,EAAGrB,cApCxB,IAACmD,KAuCAR,GACFP,EAAWW,MAGdQ,OAAM,SAACC,GACNlB,EAAQmB,OAAOC,yBAAyBF,EAAO,WAAWzC,YAGhE,CAACuB,IAoBH,OAjBAqB,qBAAU,WACR,IAAIhB,GAAW,EAWf,OATcN,EAEZI,EAFYJ,EAEIM,GAEZA,GACFJ,IAIG,WACLI,GAAW,KAEZ,CAACN,EAAaC,EAASG,EAAUF,IAE7B,cAAC,EAAD,CAAUtC,UAAWJ,EAAMI,UAAWU,KAAMwB","file":"static/js/8.884361e1.chunk.js","sourcesContent":["// API KEY\nexport const API_KEY = process.env.REACT_APP_WEATHER_API_KEY;\n\n// BASE URL\nexport const BASE_URL = \"https://dataservice.accuweather.com/\";\n\n// LOCATIONS\nexport const BASE_URL_LOCATIONS = `${BASE_URL}locations/v1/cities/autocomplete`;\n\n// CONDITIONS\nexport const BASE_URL_CONDITIONS = `${BASE_URL}currentconditions/v1/`;\n\n// DAILY\nexport const BASE_URL_DAILY = `${BASE_URL}forecasts/v1/daily/1day/`;\n\n// FORECAST\nexport const BASE_URL_FORECAST = `${BASE_URL}forecasts/v1/hourly/12hour/`;\n","import axios from 'axios';\nimport * as axiosDefs from '../constants/api';\n\nconst createInstance= (url, queryParams) => {\n    const instance= axios.create({\n        baseURL: url,\n        params:{\n            apikey: axiosDefs.API_KEY,\n            ...queryParams\n        }\n    })\n    return instance;\n}\n\nexport const axiosConditions= createInstance(axiosDefs.BASE_URL_CONDITIONS, null);\n\nexport const axiosDaily= createInstance(axiosDefs.BASE_URL_DAILY, {details: true});\n\nexport const axiosForecast= createInstance(axiosDefs.BASE_URL_FORECAST, null);\n\nexport const axiosLocations= createInstance(axiosDefs.BASE_URL_LOCATIONS, null);","export const getIconSrc= (iconNum) => {\n    let num= iconNum?.toString();\n    if(iconNum < 10){\n        num= `0${num}`;\n    }\n    const src= iconNum ? `https://developer.accuweather.com/sites/default/files/${num}-s.png` : null;\n    return src;\n}","import React from 'react';\nimport styled from 'styled-components';\n\nconst setSize= (size) => {\n    switch(size){\n        case 'small':\n            return '3.5rem';\n        default: //big\n            return `25rem;\n            \n            @media only screen and (max-width: 37.25em){\n                width: 20rem;\n            }`;\n    }\n}\n\nconst SImg= styled.img`\n    width: ${props => setSize(props?.size)};\n    height: auto;\n`;\n\nconst WeatherIcon= (props) => {\n\n    return(\n        <SImg \n        className= {props.className}\n        src= {props.src}\n        size= {props.size}\n        />\n    );\n}\n\nexport default WeatherIcon;","import React from 'react';\nimport styled from 'styled-components';\nimport Typography from '../UI/Typography/Typography';\nimport WeatherIcon from '../UI/WeatherIcon/WeatherIcon';\n\nconst SForcestItemWrapper= styled.div`\n    padding: 0.8rem;\n    height: 16rem;\n    width: 15rem;\n    min-width: 12rem;\n    margin: 0.8rem;\n    border-radius: 3px;\n    background-color: rgba(255, 255, 255, 0.2);\n\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    justify-content: center;\n`;\n\nconst SWeatherIcon= styled(WeatherIcon)`\n    margin: 6px;\n    margin-bottom: 8px;\n`;\n\nconst ForecastItem= props => {\n    \n    return (\n        <SForcestItemWrapper\n        className= {props.className}>\n            <Typography\n            typographyType= 'body'\n            capitalize= {false}\n            text= {props.data.date} />\n            <Typography\n            typographyType= 'body'\n            capitalize= {false}\n            text= {props.data.time} />\n            <SWeatherIcon\n            src= {props.data.iconSrc}\n            size= \"small\"/>\n            <Typography\n            typographyType= 'body'\n            capitalize= {false}\n            text= {props.data.value + 'Â°'} />\n        </SForcestItemWrapper>\n    );\n}\n\nexport default ForecastItem;","import React from \"react\";\nimport styled from \"styled-components\";\nimport Typography from \"../UI/Typography/Typography\";\nimport ForecastItem from \"../ForecastItem/ForecastItem\";\n\nconst SForecastWrapper = styled.div`\n  grid-row: 3 / -1;\n  grid-column: 1 / -1;\n\n  @media only screen and (max-width: 56.25em) {\n    grid-row: 4 / -1;\n  }\n\n  display: flex;\n  flex-direction: column;\n\n  width: 100%;\n`;\n\nconst SForecast = styled.div`\n  display: flex;\n  flex-wrap: no-wrap;\n\n  height: 100%;\n  overflow-x: hidden;\n\n  &:active,\n  &:hover,\n  &:focus {\n    overflow-x: scroll;\n  }\n`;\n\nconst Forecast = (props) => {\n  const renderForecastItem = ({ date, time, value, iconSrc }) => {\n    return (\n      <ForecastItem\n        key={time}\n        data={{ date: date, time: time, value: value, iconSrc: iconSrc }}\n      />\n    );\n  };\n\n  return (\n    <SForecastWrapper className={props.className}>\n      <Typography typographyType=\"heading3\" shadow={true} text=\"forecast\" />\n      <SForecast>\n        {props.data?.map((el) =>\n          renderForecastItem({\n            date: el.date,\n            time: el.time,\n            value: el.value,\n            iconSrc: el.iconSrc,\n          })\n        )}\n      </SForecast>\n    </SForecastWrapper>\n  );\n};\n\nexport default Forecast;\n","import React, { useCallback, useEffect, useState } from \"react\";\nimport { axiosForecast as axios } from \"../../services/axios\";\nimport _ from \"lodash\";\nimport moment from \"moment\";\nimport Forecast from \"../../components/Forecast/Forecast\";\nimport { getIconSrc } from \"../../utilities/getIconSrc\";\n\nconst FtoC = (fDeg) => {\n  return ((fDeg - 32) * (5 / 9)).toFixed(1);\n};\n\nconst toLocalDate = (ISO8601String) => {\n  const ISODate = moment.utc().format(ISO8601String);\n  const utcDate = moment.utc(ISODate).toDate();\n  return moment(utcDate).local().format(\"DD.MM\");\n};\n\nconst toLocalTime = (ISO8601String) => {\n  const ISODate = moment.utc().format(ISO8601String);\n  const utcDate = moment.utc(ISODate).toDate();\n  return moment(utcDate).local().format(\"HH:mm\");\n};\n\nconst ForecastContainer = (props) => {\n  const [results, setResults] = useState([]);\n\n  const { locationKey, onError } = props;\n\n  const initState = useCallback(() => {\n    setResults([]);\n  }, []);\n\n  const getState = useCallback(\n    (query, isActive) => {\n      axios\n        .get(`${query}`)\n        .then((res) => {\n          let forecastResults = _.cloneDeep(res.data);\n          forecastResults = forecastResults.map((el) => {\n            return {\n              date: toLocalDate(el.DateTime),\n              time: toLocalTime(el.DateTime),\n              value: FtoC(el.Temperature.Value),\n              iconSrc: getIconSrc(el.WeatherIcon),\n            };\n          });\n          if (isActive) {\n            setResults(forecastResults);\n          }\n        })\n        .catch((error) => {\n          onError(Object.getOwnPropertyDescriptor(error, 'message').value);\n        });\n    },\n    [onError]\n  );\n\n  useEffect(() => {\n    let isActive = true;\n\n    const query = locationKey;\n    if (query) {\n      getState(query, isActive);\n    } else {\n      if (isActive) {\n        initState();\n      }\n    }\n\n    return () => {\n      isActive = false;\n    };\n  }, [locationKey, onError, getState, initState]);\n\n  return <Forecast className={props.className} data={results} />;\n};\n\nexport default ForecastContainer;\n"],"sourceRoot":""}