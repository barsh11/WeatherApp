{"version":3,"sources":["constants/api.js","services/axios.js","utilities/getIconSrc.js","components/UI/WeatherIcon/WeatherIcon.js","components/CurrWeather/CurrWeather.jsx","components/CurrDate/CurrDate.jsx","components/CurrLocation/CurrLocation.jsx","components/CurrConditions/CurrConditions.jsx","containers/CurrContainer/CurrContainer.js"],"names":["BASE_URL","BASE_URL_LOCATIONS","BASE_URL_CONDITIONS","BASE_URL_DAILY","BASE_URL_FORECAST","createInstance","url","queryParams","axios","create","baseURL","params","apikey","process","axiosConditions","axiosDefs","axiosDaily","details","axiosForecast","axiosLocations","getIconSrc","iconNum","num","toString","SImg","styled","img","props","size","setSize","WeatherIcon","className","src","SCurrWeatherWrapper","div","SCurrWeather","CurrWeather","data","iconSrc","Typography","typographyType","text","deg","description","CurrDate","date","moment","format","CurrLocation","bold","shadow","city","country","SCurrConditions","CurrConditions","CurrContainer","useState","temperature","setTemperature","setDescription","iconNumber","setIconNumber","locationKey","onError","initState","useCallback","getState","query","isActive","get","then","res","results","_","cloneDeep","Temperature","Metric","Value","WeatherText","catch","error","Object","getOwnPropertyDescriptor","value","useEffect"],"mappings":"8QAIaA,EAAW,uCAGXC,EAAkB,UAAMD,EAAN,oCAGlBE,EAAmB,UAAMF,EAAN,yBAGnBG,EAAc,UAAMH,EAAN,4BAGdI,EAAiB,UAAMJ,EAAN,+BCbxBK,EAAgB,SAACC,EAAKC,GAQxB,OAPgBC,IAAMC,OAAO,CACzBC,QAASJ,EACTK,OAAO,aACHC,ODNWC,oCCORN,MAMFO,EAAiBT,EAAeU,EAA+B,MAE/DC,EAAYX,EAAeU,EAA0B,CAACE,SAAS,IAE/DC,EAAeb,EAAeU,EAA6B,MAE3DI,EAAgBd,EAAeU,EAA8B,O,gCCpB1E,kCAAO,IAAMK,EAAY,SAACC,GACtB,IAAIC,EAAG,OAAED,QAAF,IAAEA,OAAF,EAAEA,EAASE,WAKlB,OAJGF,EAAU,KACTC,EAAI,IAAD,OAAMA,IAEFD,EAAO,gEAA4DC,EAA5D,UAA0E,O,2KCFhG,IAaME,EAAMC,IAAOC,IAAT,KACG,SAAAC,GAAK,OAdH,SAACC,GACZ,OAAOA,GACH,IAAK,QACD,MAAO,SACX,QACI,MAAM,gIASIC,CAAO,OAACF,QAAD,IAACA,OAAD,EAACA,EAAOC,SAetBE,IAXI,SAACH,GAEhB,OACI,cAACH,EAAD,CACAO,UAAYJ,EAAMI,UAClBC,IAAML,EAAMK,IACZJ,KAAOD,EAAMC,S,0iBCtBrB,IAAMK,EAAqBR,IAAOS,IAAT,KAanBC,EAAcV,IAAOS,IAAT,KA8BHE,EAtBI,SAAAT,GAAU,IAAD,MAExB,OACI,eAACM,EAAD,CACAF,UAAYJ,EAAMI,UADlB,UAEI,cAACD,EAAA,EAAD,CACAE,IAAG,UAAGL,EAAMU,YAAT,aAAG,EAAYC,QAClBV,KAAM,QACN,eAACO,EAAD,WACI,cAACI,EAAA,EAAD,CACIR,UAAYJ,EAAMI,UAClBS,eAAgB,WAChBC,MAAQ,UAAAd,EAAMU,YAAN,eAAYK,KAAM,SAC9B,cAACH,EAAA,EAAD,CACIR,UAAYJ,EAAMI,UAClBS,eAAgB,WAChBC,KAAI,UAAGd,EAAMU,YAAT,aAAG,EAAYM,qB,iBC3BxBC,EAXC,SAAAjB,GACZ,IAAIkB,EAAMC,MAASC,OAAO,eAE1B,OACI,cAACR,EAAA,EAAD,CACAR,UAAYJ,EAAMI,UAClBS,eAAgB,WAChBC,KAAOI,KCKAG,EAbK,SAAArB,GAAU,IAAD,IAEzB,OACI,cAACY,EAAA,EAAD,CACAR,UAAYJ,EAAMI,UAClBS,eAAgB,WAChBS,MAAO,EACPC,QAAS,EACTT,KAAI,oBAAMd,EAAMU,YAAZ,aAAM,EAAYc,KAAlB,uBAA2BxB,EAAMU,YAAjC,aAA2B,EAAYe,Y,wZCLnD,IAAMC,EAAkB5B,IAAOS,IAAV,KA2CNoB,EAtBQ,SAAC3B,GACtB,OACE,eAAC0B,EAAD,CAAiBtB,UAAWJ,EAAMI,UAAlC,UACE,cAAC,EAAD,CACEM,KACEV,EAAMU,MAAQ,CAAEc,KAAMxB,EAAMU,KAAKc,KAAMC,QAASzB,EAAMU,KAAKe,WAG/D,cAAC,EAAD,IACA,cAAC,EAAD,CACEf,KACEV,EAAMU,MAAQ,CACZK,IAAKf,EAAMU,KAAKK,IAChBC,YAAahB,EAAMU,KAAKM,YACxBL,QAASX,EAAMU,KAAKC,eC4BjBiB,UA/DO,SAAC5B,GAAW,IAAD,EACO6B,mBAAS,IADhB,mBACxBC,EADwB,KACXC,EADW,OAEOF,mBAAS,IAFhB,mBAExBb,EAFwB,KAEXgB,EAFW,OAGKH,mBAAS,MAHd,mBAGxBI,EAHwB,KAGZC,EAHY,KAKvBC,EAAyBnC,EAAzBmC,YAAaC,EAAYpC,EAAZoC,QAEfC,EAAYC,uBAAY,WAC5BP,EAAe,IACfC,EAAe,IACfE,EAAc,QACb,IAEGK,EAAWD,uBACf,SAACE,EAAOC,GACN5D,IACG6D,IADH,UACUF,IACPG,MAAK,SAACC,GACL,IAAMC,EAAUC,IAAEC,UAAUH,EAAIlC,KAAK,IACjC+B,IACFV,EAAec,EAAQG,YAAYC,OAAOC,OAC1ClB,EAAea,EAAQM,aACvBjB,EAAcW,EAAQ1C,iBAGzBiD,OAAM,SAACC,GACNjB,EAAQkB,OAAOC,yBAAyBF,EAAO,WAAWG,YAGhE,CAACpB,IAoBH,OAjBAqB,qBAAU,WACR,IAAIhB,GAAW,EAWf,OATcN,EAEZI,EAFYJ,EAEIM,GAEZA,GACFJ,IAIG,WACLI,GAAW,KAEZ,CAACN,EAAaC,EAASG,EAAUF,IAGlC,cAAC,EAAD,CACEjC,UAAWJ,EAAMI,UACjBM,KAAM,CACJc,KAAMxB,EAAMU,KAAKc,KACjBC,QAASzB,EAAMU,KAAKe,QACpBV,IAAKe,EACLd,YAAaA,EACbL,QAASlB,YAAWwC","file":"static/js/7.0ecd6716.chunk.js","sourcesContent":["// API KEY\nexport const API_KEY = process.env.REACT_APP_WEATHER_API_KEY;\n\n// BASE URL\nexport const BASE_URL = \"https://dataservice.accuweather.com/\";\n\n// LOCATIONS\nexport const BASE_URL_LOCATIONS = `${BASE_URL}locations/v1/cities/autocomplete`;\n\n// CONDITIONS\nexport const BASE_URL_CONDITIONS = `${BASE_URL}currentconditions/v1/`;\n\n// DAILY\nexport const BASE_URL_DAILY = `${BASE_URL}forecasts/v1/daily/1day/`;\n\n// FORECAST\nexport const BASE_URL_FORECAST = `${BASE_URL}forecasts/v1/hourly/12hour/`;\n","import axios from 'axios';\nimport * as axiosDefs from '../constants/api';\n\nconst createInstance= (url, queryParams) => {\n    const instance= axios.create({\n        baseURL: url,\n        params:{\n            apikey: axiosDefs.API_KEY,\n            ...queryParams\n        }\n    })\n    return instance;\n}\n\nexport const axiosConditions= createInstance(axiosDefs.BASE_URL_CONDITIONS, null);\n\nexport const axiosDaily= createInstance(axiosDefs.BASE_URL_DAILY, {details: true});\n\nexport const axiosForecast= createInstance(axiosDefs.BASE_URL_FORECAST, null);\n\nexport const axiosLocations= createInstance(axiosDefs.BASE_URL_LOCATIONS, null);","export const getIconSrc= (iconNum) => {\n    let num= iconNum?.toString();\n    if(iconNum < 10){\n        num= `0${num}`;\n    }\n    const src= iconNum ? `https://developer.accuweather.com/sites/default/files/${num}-s.png` : null;\n    return src;\n}","import React from 'react';\nimport styled from 'styled-components';\n\nconst setSize= (size) => {\n    switch(size){\n        case 'small':\n            return '3.5rem';\n        default: //big\n            return `25rem;\n            \n            @media only screen and (max-width: 37.25em){\n                width: 20rem;\n            }`;\n    }\n}\n\nconst SImg= styled.img`\n    width: ${props => setSize(props?.size)};\n    height: auto;\n`;\n\nconst WeatherIcon= (props) => {\n\n    return(\n        <SImg \n        className= {props.className}\n        src= {props.src}\n        size= {props.size}\n        />\n    );\n}\n\nexport default WeatherIcon;","import React from 'react';\nimport styled from 'styled-components';\nimport Typography from '../UI/Typography/Typography';\nimport WeatherIcon from '../UI/WeatherIcon/WeatherIcon'\n\nconst SCurrWeatherWrapper= styled.div`\n    display: flex;\n    align-items: center;\n\n    align-self: center;\n    \n    margin-right: -13rem;\n\n    @media only screen and (max-width: 75em){\n        margin-right: 0;\n    }\n`;\n\nconst SCurrWeather= styled.div`\n    font-weight: 100;\n    margin-left: 1rem;\n\n    display: flex;\n    flex-direction: column;\n`;\n\nconst CurrWeather= props => {\n\n    return (\n        <SCurrWeatherWrapper\n        className= {props.className}>\n            <WeatherIcon\n            src= {props.data?.iconSrc}\n            size= 'big' />\n            <SCurrWeather>\n                <Typography\n                    className= {props.className}\n                    typographyType= 'heading1'\n                    text= {(props.data?.deg + 'Â°')} />\n                <Typography \n                    className= {props.className}\n                    typographyType= 'heading3'\n                    text= {props.data?.description}/>\n            </SCurrWeather>\n        </SCurrWeatherWrapper>\n    );\n}\n\nexport default CurrWeather;","import React from 'react';\nimport Typography from '../UI/Typography/Typography';\nimport moment from 'moment';\n\nconst CurrDate= props => {\n    let date= moment().format('dddd D MMMM');\n\n    return (\n        <Typography\n        className= {props.className}\n        typographyType= 'heading3'\n        text= {date} />\n    );\n}\n\nexport default CurrDate;","import React from 'react';\nimport Typography from '../UI/Typography/Typography';\n\nconst CurrLocation= props => {\n\n    return (\n        <Typography \n        className= {props.className}\n        typographyType= 'heading2'\n        bold= {true}\n        shadow= {true}\n        text= {`${props.data?.city}, ${props.data?.country}`}\n        />\n    );\n}\n\nexport default CurrLocation;","import React from \"react\";\nimport styled from \"styled-components\";\nimport CurrWeather from \"../CurrWeather/CurrWeather\";\nimport CurrDate from \"../CurrDate/CurrDate\";\nimport CurrLocation from \"../CurrLocation/CurrLocation\";\n\nconst SCurrConditions = styled.div`\n  grid-row: 2 / span 1;\n  grid-column: 1 / span 1;\n\n  justify-self: center;\n\n  @media only screen and (max-width: 56.25em) {\n    grid-column: 1 / -1;\n    justify-self: center;\n  }\n\n  display: flex;\n  flex-direction: column;\n\n  margin: 4rem;\n\n  @media only screen and (max-width: 56.25em) {\n    align-items: center;\n  }\n`;\n\nconst CurrConditions = (props) => {\n  return (\n    <SCurrConditions className={props.className}>\n      <CurrLocation\n        data={\n          props.data && { city: props.data.city, country: props.data.country }\n        }\n      />\n      <CurrDate />\n      <CurrWeather\n        data={\n          props.data && {\n            deg: props.data.deg,\n            description: props.data.description,\n            iconSrc: props.data.iconSrc,\n          }\n        }\n      />\n    </SCurrConditions>\n  );\n};\n\nexport default CurrConditions;\n","import React, { useCallback, useEffect, useState } from \"react\";\nimport { axiosConditions as axios } from \"../../services/axios\";\nimport _ from \"lodash\";\nimport { getIconSrc } from \"../../utilities/getIconSrc\";\nimport CurrConditions from \"../../components/CurrConditions/CurrConditions\";\n\nconst CurrContainer = (props) => {\n  const [temperature, setTemperature] = useState(\"\");\n  const [description, setDescription] = useState(\"\");\n  const [iconNumber, setIconNumber] = useState(null);\n\n  const { locationKey, onError } = props;\n\n  const initState = useCallback(() => {\n    setTemperature(\"\");\n    setDescription(\"\");\n    setIconNumber(null);\n  }, []);\n\n  const getState = useCallback(\n    (query, isActive) => {\n      axios\n        .get(`${query}`)\n        .then((res) => {\n          const results = _.cloneDeep(res.data[0]);\n          if (isActive) {\n            setTemperature(results.Temperature.Metric.Value);\n            setDescription(results.WeatherText);\n            setIconNumber(results.WeatherIcon);\n          }\n        })\n        .catch((error) => {\n          onError(Object.getOwnPropertyDescriptor(error, 'message').value);\n        });\n    },\n    [onError]\n  );\n\n  useEffect(() => {\n    let isActive = true;\n\n    const query = locationKey;\n    if (query) {\n      getState(query, isActive);\n    } else {\n      if (isActive) {\n        initState();\n      }\n    }\n\n    return () => {\n      isActive = false;\n    };\n  }, [locationKey, onError, getState, initState]);\n\n  return (\n    <CurrConditions\n      className={props.className}\n      data={{\n        city: props.data.city,\n        country: props.data.country,\n        deg: temperature,\n        description: description,\n        iconSrc: getIconSrc(iconNumber),\n      }}\n    />\n  );\n};\n\nexport default CurrContainer;\n"],"sourceRoot":""}