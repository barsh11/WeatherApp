{"version":3,"sources":["constants/api.js","services/axios.js","components/CurrParameter/CurrParameter.jsx","components/CurrParameters/CurrParameters.jsx","containers/DailyContainer/DailyContainer.js"],"names":["BASE_URL","BASE_URL_LOCATIONS","BASE_URL_CONDITIONS","BASE_URL_DAILY","BASE_URL_FORECAST","createInstance","url","queryParams","axios","create","baseURL","params","apikey","process","axiosConditions","axiosDefs","axiosDaily","details","axiosForecast","axiosLocations","SCurrParameterWrapper","styled","div","CurrParameter","props","className","Typography","typographyType","text","value","label","renderUnit","SCurrParametersWrapper","CurrParameters","data","map","el","FtoC","fDeg","toFixed","toLocalTime","ISO8601String","ISODate","moment","utc","format","utcDate","toDate","local","DailyContainer","useState","sunrise","setSunrise","sunset","setSunset","lowTemperature","setLowTemperature","highTemperature","setHighTemperature","rainProb","setRainProb","wind","setWind","locationKey","onError","initState","useCallback","getState","query","isActive","get","then","res","results","_","cloneDeep","DailyForecasts","sunriseTime","Sun","Rise","sunsetTime","Set","Temperature","Minimum","Value","Maximum","Day","RainProbability","Wind","Speed","catch","error","Object","getOwnPropertyDescriptor","useEffect"],"mappings":"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","file":"static/js/10.8c9e297a.chunk.js","sourcesContent":["// API KEY\nexport const API_KEY = process.env.REACT_APP_WEATHER_API_KEY;\n\n// BASE URL\nexport const BASE_URL = \"https://dataservice.accuweather.com/\";\n\n// LOCATIONS\nexport const BASE_URL_LOCATIONS = `${BASE_URL}locations/v1/cities/autocomplete`;\n\n// CONDITIONS\nexport const BASE_URL_CONDITIONS = `${BASE_URL}currentconditions/v1/`;\n\n// DAILY\nexport const BASE_URL_DAILY = `${BASE_URL}forecasts/v1/daily/1day/`;\n\n// FORECAST\nexport const BASE_URL_FORECAST = `${BASE_URL}forecasts/v1/hourly/12hour/`;\n","import axios from 'axios';\nimport * as axiosDefs from '../constants/api';\n\nconst createInstance= (url, queryParams) => {\n    const instance= axios.create({\n        baseURL: url,\n        params:{\n            apikey: axiosDefs.API_KEY,\n            ...queryParams\n        }\n    })\n    return instance;\n}\n\nexport const axiosConditions= createInstance(axiosDefs.BASE_URL_CONDITIONS, null);\n\nexport const axiosDaily= createInstance(axiosDefs.BASE_URL_DAILY, {details: true});\n\nexport const axiosForecast= createInstance(axiosDefs.BASE_URL_FORECAST, null);\n\nexport const axiosLocations= createInstance(axiosDefs.BASE_URL_LOCATIONS, null);","import React from 'react';\nimport Typography from '../UI/Typography/Typography';\nimport styled from 'styled-components';\n\nconst SCurrParameterWrapper= styled.div`\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n`;\n\nconst CurrParameter= props => {\n    \n    const renderUnit= label => {\n        switch(label){\n            case 'hight':\n            case 'low':\n                return 'Â°'; \n            case 'wind':\n                return 'mph'; \n            case 'rain':\n                return '%'; \n            default:\n                return '';\n        }\n    }\n    \n    return (\n        <SCurrParameterWrapper\n        className= {props.className}>\n            <Typography \n            className= {props.className}\n            typographyType= 'heading3'\n            text= {props.value + renderUnit(props.label)}/>\n            <Typography\n            className= {props.className}\n            typographyType= 'description'\n            text= {props.label}/>\n        </SCurrParameterWrapper>\n    );\n}\n\nexport default CurrParameter;","import React from \"react\";\nimport styled from \"styled-components\";\nimport CurrParameter from \"../CurrParameter/CurrParameter\";\n\nconst SCurrParametersWrapper = styled.div`\n  grid-row: 2 / span 1;\n  grid-column: 2 / span 1;\n\n  @media only screen and (max-width: 56.25em) {\n    grid-row: 3 / span 1;\n    grid-column: 1 / -1;\n  }\n\n  width: 85%;\n  min-width: 320px;\n  max-width: 510px;\n  height: 55%;\n  background-color: rgba(255, 255, 255, 0.2);\n  border-radius: 2rem;\n  padding: 1rem 2rem;\n\n  display: grid;\n  grid-auto-flow: column;\n  grid-template-rows: 1fr 1fr;\n  grid-template-columns: 1fr 1fr 1fr;\n  align-items: center;\n  grid-gap: 1rem;\n\n  @media only screen and (max-width: 56.25em) {\n    height: 70%;\n  }\n\n  @media only screen and (max-width: 31.25em) {\n    width: 95%;\n  }\n`;\n\nconst CurrParameters = (props) => {\n  const renderCurrParameter = (value, label) => {\n    return <CurrParameter key={label} value={value} label={label} />;\n  };\n\n  return (\n    <SCurrParametersWrapper className={props.className}>\n      {props.data?.map((el) => renderCurrParameter(el.value, el.label))}\n    </SCurrParametersWrapper>\n  );\n};\n\nexport default CurrParameters;\n","import React, { useCallback, useEffect, useState } from \"react\";\nimport { axiosDaily as axios } from \"../../services/axios\";\nimport _ from \"lodash\";\nimport moment from \"moment\";\nimport CurrParameters from \"../../components/CurrParameters/CurrParameters\";\n\nconst FtoC = (fDeg) => {\n  return ((fDeg - 32) * (5 / 9)).toFixed(1);\n};\n\nconst toLocalTime = (ISO8601String) => {\n  const ISODate = moment.utc().format(ISO8601String);\n  const utcDate = moment.utc(ISODate).toDate();\n  return moment(utcDate).local().format(\"HH:mm\");\n};\n\nconst DailyContainer = (props) => {\n  const [sunrise, setSunrise] = useState(\"\");\n  const [sunset, setSunset] = useState(\"\");\n  const [lowTemperature, setLowTemperature] = useState(\"\");\n  const [highTemperature, setHighTemperature] = useState(\"\");\n  const [rainProb, setRainProb] = useState(\"\");\n  const [wind, setWind] = useState(\"\");\n\n  const { locationKey, onError } = props;\n\n  const initState = useCallback(() => {\n    setSunrise(\"\");\n    setSunset(\"\");\n    setLowTemperature(\"\");\n    setHighTemperature(\"\");\n    setRainProb(\"\");\n    setWind(\"\");\n  }, []);\n\n  const getState = useCallback(\n    (query, isActive) => {\n      axios\n        .get(`${query}`)\n        .then((res) => {\n          \n          const results = _.cloneDeep(res.data.DailyForecasts[0]);\n\n          const sunriseTime = results.Sun.Rise;\n          const sunsetTime = results.Sun.Set;\n          if (isActive) {\n            setSunrise(toLocalTime(sunriseTime));\n            setSunset(toLocalTime(sunsetTime));\n            setLowTemperature(FtoC(results.Temperature.Minimum.Value));\n            setHighTemperature(FtoC(results.Temperature.Maximum.Value));\n            setRainProb(results.Day.RainProbability);\n            setWind(results.Day.Wind.Speed.Value);\n          }\n        })\n        .catch((error) => { \n          onError(Object.getOwnPropertyDescriptor(error, 'message').value);\n        });\n    },\n    [onError]\n  );\n\n  useEffect(() => {\n    let isActive = true;\n\n    const query = locationKey;\n    if (query) {\n      getState(query, isActive);\n    } else {\n      if (isActive) {\n        initState();\n      }\n    }\n\n    return () => {\n      isActive = false;\n    };\n  }, [locationKey, onError, getState, initState]);\n\n  return (\n    <CurrParameters\n      className={props.className}\n      data={[\n        { value: highTemperature, label: \"hight\" },\n        { value: lowTemperature, label: \"low\" },\n        { value: wind, label: \"wind\" },\n        { value: rainProb, label: \"rain\" },\n        { value: sunrise, label: \"sunrise\" },\n        { value: sunset, label: \"sunset\" },\n      ]}\n    />\n  );\n};\n\nexport default DailyContainer;\n"],"sourceRoot":""}